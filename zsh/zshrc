#vim binding
bindkey -v
# keybindings


# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]="$terminfo[khome]"
key[End]="$terminfo[kend]"
key[Insert]="$terminfo[kich1]"
key[Backspace]="$terminfo[kbs]"
key[Delete]="$terminfo[kdch1]"
key[Up]="$terminfo[kcuu1]"
key[Down]="$terminfo[kcud1]"
key[Left]="$terminfo[kcub1]"
key[Right]="$terminfo[kcuf1]"
key[PageUp]="$terminfo[kpp]"
key[PageDown]="$terminfo[knp]"

# setup key accordingly
#
## Note: We prefer backward-delete-char over vi-backward-delete-char
## because the latter has a weird opinion where to delete based on
## the position insert mode was entered... tl;dr it's imho counterintuitive
[[ -n "$key[Home]"      ]] && bindkey -- "$key[Home]"      beginning-of-line
[[ -n "$key[End]"       ]] && bindkey -- "$key[End]"       end-of-line
[[ -n "$key[Insert]"    ]] && bindkey -- "$key[Insert]"    overwrite-mode
[[ -n "$key[Backspace]" ]] && bindkey -- "$key[Backspace]" backward-delete-char
[[ -n "$key[Delete]"    ]] && bindkey -- "$key[Delete]"    delete-char
[[ -n "$key[Up]"        ]] && bindkey -- "$key[Up]"        up-line-or-history
[[ -n "$key[Down]"      ]] && bindkey -- "$key[Down]"      down-line-or-history
[[ -n "$key[Left]"      ]] && bindkey -- "$key[Left]"      backward-char
[[ -n "$key[Right]"     ]] && bindkey -- "$key[Right]"     forward-char

## Also bind stuff in vicmd map
[[ -n "$key[Home]"      ]] && bindkey -a -- "$key[Home]"      vi-beginning-of-line
[[ -n "$key[End]"       ]] && bindkey -a -- "$key[End]"       vi-end-of-line
[[ -n "$key[Backspace]" ]] && bindkey -a -- "$key[Backspace]" backward-delete-char

#because apparently zsh maps ^? regardless of terminfo, so do we
bindkey -a -- '^?'  backward-delete-char
bindkey    -- '^?'  backward-delete-char

autoload -Uz compinit promptinit colors
colors
compinit
promptinit

MY_CONF_DIR=~/.zshconf
MY_LOCAL_CONF_DIR=~/.zshlocal

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        echoti smkx
    }
    function zle-line-finish () {
        echoti rmkx
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi


setopt correct # spelling correction for commands
setopt correctall # spelling correction for arguments

#menu completion
zstyle ':completion:*' menu select=3
setopt completealiases
zstyle ':completion:*:correct:*'       insert-unambiguous true
zstyle ':completion:*:corrections'     format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}'
zstyle ':completion:*:correct:*'       original true
zstyle ':completion:*:default'         list-colors ${(s.:.)LS_COLORS}

#make history search depend on current input
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

[[ -n "$key[Up]" ]] && bindkey -- "$key[Up]" up-line-or-beginning-search
[[ -n "$key[Down]" ]] && bindkey -- "$key[Down]" down-line-or-beginning-search

HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zshist

## Custom prompt.

# Perform parameter substitution etc on the prompt
setopt prompt_subst

#Version control info for git (only for non-root)
if [[ "${EUID}" != 0 ]]; then
    autoload -Uz vcs_info
    zstyle ':vcs_info:*' enable git
    precmd_vcs_info() { vcs_info }
    precmd_functions+=( precmd_vcs_info )
    zstyle ':vcs_info:git:*' formats '%{%28F%}%b%f'
fi

#Widgets updating the environment variable once the VIM mode changes.


#Environment variable for the status of VIM input mode.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    MY_VIM_PROMPT="%009F"
    function zle-line-init zle-keymap-select
    {
        echoti smkx
        if [[ "$KEYMAP" == "viins" || "$KEYMAP" == "main" ]]; then
            MY_VIM_PROMPT=""
        elif [[ $KEYMAP == "vicmd" ]]; then
            MY_VIM_PROMPT="%009F"
        fi
        zle reset-prompt;
    }
    zle -N zle-keymap-select
    zle -N zle-line-init
else
    MY_VIM_PROMPT=""
fi

# When logged in through SSH, we colorize the background to make that clear
if [[ ! -z "${SSH_CLIENT}" ]]; then
    SSH_BGCOLOR="%K{208}"
    SSH_BGEND="%k"
else
    SSH_BGCOLOR=""
    SSH_BGEND=""
fi

# root should be visibly different
if [[ "${EUID}" != 0 ]]; then
    USERNAME_STYLE="%F{245}"
    USERNAME_STYLE_END="%f"
else
    USERNAME_STYLE="%F{202}%B"
    USERNAME_STYLE_END="%f%b"
fi

#The actual prompt variables
# Note: We escape the `$` character to ensure that the PROMPT variable still holds
# the string `${MY_VIM_PROMPT}` in order for that to be expanded only upon zle-reset-prompt
# above.
PROMPT="${USERNAME_STYLE}%n${USERNAME_STYLE_END}%239F@${SSH_BGCOLOR}%60F%m%f${SSH_BGEND}%240F:%5~%{\${MY_VIM_PROMPT}%}%#%f "
RPROMPT="\$vcs_info_msg_0_%(?..%{$fg_bold[red]%}[%?]%{$reset_color%b%})"
if [[ ! -z "${SSH_CLIENT}" ]]; then
    RPROMPT="${RPROMPT} %{%F{red}%}â‡„%f"
fi

## Plugins
# We enable plugins only for non-root shells. Should not get too comfortable on a root shell
# anyway, plus plugins can slow things down on some devices.

if [[ "${EUID}" != 0 ]]; then

    # jumping with z
    if [[ -r "/usr/share/z/z.sh" ]]; then
        source /usr/share/z/z.sh
    fi

    # Autosuggestions a la fish
    if [[ -r /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
        source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
    fi

    if [[ -r /usr/share/fzf/completion.zsh ]]; then
        source /usr/share/fzf/completion.zsh
    fi

    if [[ -r /usr/share/fzf/key-bindings.zsh ]]; then
        source /usr/share/fzf/key-bindings.zsh
    fi
fi

## Customizations
# Alias definitions
source "$MY_CONF_DIR"/aliases

# local configuration
if [[ -d "$MY_LOCAL_CONF_DIR" ]]; then
    for file in "$MY_LOCAL_CONF_DIR"/*(.N); do
        source "$file"
    done
fi

# Syntax highlighting (must be sourced at the end)
if [[ "${EUID}" != 0 ]]; then
    if [[ -r /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
        source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    fi
    # For Debian systems
    if [[ -r /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
        source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    fi
fi
