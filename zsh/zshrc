autoload -Uz compinit promptinit colors
colors
compinit
promptinit

MY_CONF_DIR=~/.zshconf
MY_LOCAL_CONF_DIR=~/.zshlocal

# keybindings

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]="$terminfo[khome]"
key[End]="$terminfo[kend]"
key[Insert]="$terminfo[kich1]"
key[Backspace]="$terminfo[kbs]"
key[Delete]="$terminfo[kdch1]"
key[Up]="^[[A" # tmux needs this
key[Down]="^[[B" #tmux needs this
key[Left]="$terminfo[kcub1]"
key[Right]="$terminfo[kcuf1]"
key[PageUp]="$terminfo[kpp]"
key[PageDown]="$terminfo[knp]"

# setup key accordingly
[[ -n "$key[Home]"      ]] && bindkey -- "$key[Home]"      beginning-of-line
[[ -n "$key[End]"       ]] && bindkey -- "$key[End]"       end-of-line
[[ -n "$key[Insert]"    ]] && bindkey -- "$key[Insert]"    overwrite-mode
[[ -n "$key[Backspace]" ]] && bindkey -- "$key[Backspace]" backward-delete-char
[[ -n "$key[Delete]"    ]] && bindkey -- "$key[Delete]"    delete-char
[[ -n "$key[Up]"        ]] && bindkey -- "$key[Up]"        up-line-or-history
[[ -n "$key[Down]"      ]] && bindkey -- "$key[Down]"      down-line-or-history
[[ -n "$key[Left]"      ]] && bindkey -- "$key[Left]"      backward-char
[[ -n "$key[Right]"     ]] && bindkey -- "$key[Right]"     forward-char

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        echoti smkx
    }
    function zle-line-finish () {
        echoti rmkx
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

#menu completion
zstyle ':completion:*' menu select
#make aliasc completion work naturally
setopt completealiases

#make history search depend on current input
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

[[ -n "$key[Up]" ]] && bindkey -- "$key[Up]" up-line-or-beginning-search
[[ -n "$key[Down]" ]] && bindkey -- "$key[Down]" down-line-or-beginning-search

HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zshist

#vim binding
bindkey -v

# Custom prompt.

#Environment variable for the status of VIM input mode.
MY_VIM_PROMPT="[NO]"

#Version control info for git.
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
zstyle ':vcs_info:git:*' formats '%b'

#Widgets updating the environment variable once the VIM mode changes.
function zle-line-init zle-keymap-select
{
    if [[ $KEYMAP == "viins" || $KEYMAP == "main" ]]; then
        MY_VIM_PROMPT="[IN]"
    elif [[ $KEYMAP == "vicmd" ]]; then
        MY_VIM_PROMPT="[NO]"
    fi
    zle reset-prompt;
}
zle -N zle-keymap-select
zle -N zle-line-init

#The actual prompt variables
PROMPT="%{%B%}\$MY_VIM_PROMPT%{%b%} %B%F{red}%n%f@%F{blue}%m%f%b%F{yellow}(%5~)%f%# "
RPROMPT="%{%F{green}%}\$vcs_info_msg_0_%{%f%}%(?..%{$fg_bold[red]%}[%?]%{$reset_color%b%})"

setopt correct # spelling correction for commands
setopt correctall # spelling correction for arguments

#enable autojump
if [ $commands[autojump] ]; then
    source /usr/share/autojump/autojump.zsh
fi

# Alias definitions
source $MY_CONF_DIR/aliases

# local configuration
if [ -d $MY_LOCAL_CONF_DIR ]; then
    for file in $MY_LOCAL_CONF_DIR/*; do
        source "$file"
    done
fi
